name: Main

on: [push, pull_request]

jobs:
  test-matrix:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        node: [4, 5, 6, 7, 8, 9, 10, 11, 12, 13] # Does not work on pre 1.0 versions.
        exclude:
          # excludes node 4/5 on macOS
          - os: macos-latest
            node: 4 # ../node_modules/node-addon-api/src/node_api.cc:15:10: fatal error: 'algorithm' file not found
          - os: macos-latest
            node: 5 # ../node_modules/node-addon-api/src/node_api.cc:15:10: fatal error: 'algorithm' file not found

    runs-on: ${{ matrix.os }}

    name: Test with Node ${{ matrix.node }} on ${{ matrix.os }}

    steps:
      - name: Checkout latest code
        uses: actions/checkout@v1

      - name: Install Node ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Print Node version
        run: node --version

      - name: Build
        run: npm install

      - name: Test
        run: npm test
        # Mocha does not work on 4/5
        if: matrix.node >= 6

  install-from-git:
    name: Install from Github Test

    runs-on: ubuntu-latest

    steps:
      - name: Checkout latest code
        uses: actions/checkout@v1

      - name: Install Node dependencies without building locally
        run: npm install --ignore-scripts

      # Prepare Test Environment

      - name: Create Dummy Package.json
        run: echo \{\} > test/package.json

      - name: Install Current Version as Git Dependency
        working-directory: test
        run: npm install ${{ github.repository }}#${{ github.sha }}

      - name: "Debug: List Dependency Folder Contents"
        working-directory: test
        run: find node_modules/userid -type f -print

      # Ensure the code works

      - name: Run Tests with Prepared Git Dependency
        run: npm test
        env:
          MOCHA_IMPORT_OVERRIDE: userid

  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: [test-matrix, install-from-git]

    steps:
      - name: Checkout latest code
        uses: actions/checkout@v1

      - name: Install Lcov
        run: sudo apt-get install lcov -y

      - name: "Debug: Node version"
        run: node --version

      - name: Build
        run: npm install
        env:
          GENERATE_COVERAGE: "yes"

      - name: "Debug: List post build files"
        run: find * \( -path node_modules -o -path .git \) -prune -o -type f -print | tee /tmp/build.list

      - name: Test Coverage
        run: npm run coverage

      - name: "Debug: List post Coverage files"
        run: find * \( -path node_modules -o -path .git \) -prune -o -type f -print | tee /tmp/coverage.list

      - name: "Debug: Coverage diff"
        run: "diff -U 0 /tmp/build.list /tmp/coverage.list || :"

      - name: Gcov
        working-directory: build
        run: gcov -o Release/obj.target/userid/src/userid.o ../src/userid.cc

      - name: "Debug: List post Coverage files"
        run: find * \( -path node_modules -o -path .git \) -prune -o -type f -print | tee /tmp/gcov.list

      - name: "Debug: Gcov diff"
        run: "diff -U 0 /tmp/coverage.list /tmp/gcov.list || :"

      - name: Lcov Capture Gcov Data
        run: lcov --capture --directory . --output-file coverage/cc.info

      - name: Extract userid.cc Coverage Data
        run: lcov --extract coverage/cc.info '*.cc' --output-file coverage/cc.info

      - name: Combine userid.cc Coverage Data with JavaScript Coverage Data
        run: lcov --add-tracefile coverage/cc.info --add-tracefile coverage/lcov.info --output-file coverage/lcov.info

      - name: Coveralls GitHub Action
        uses: coverallsapp/github-action@v1.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish Master
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [coverage, test-matrix, install-from-git]

    steps:
      - name: Checkout latest code
        uses: actions/checkout@v1

      - name: Create .npmrc with Auth Token
        run: echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > .npmrc

      - name: Publish to npm
        run: "npm publish || :"
        env:
          NPM_TOKEN: ${{ secrets.npm_token }}
